<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <title>Schedule for Kill That Robot</title>
</head>

<body class="w-dvw h-dvh flex justify-center items-center">

  <section id="schedule-container">Loading...</section>

  <script>
    import type { Segment, Category } from "../types/twitchTypes";

    const removeAccents = (str: string): string => {
      return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    document.addEventListener('DOMContentLoaded', async () => {
      const scheduleContainer = document.getElementById('schedule-container');
      
      try {
        const response = await fetch('/api/twitch-data');

        if (!response.ok) {
          throw new Error(`HTTP Error: ${response.status}`);
        }

        const data = await response.json();

        if (data.error) {
          throw new Error(data.error);
        }

        const { schedule, categories } = data;

        if (schedule && schedule.segments.length > 0 && scheduleContainer !== null ) {
          scheduleContainer.innerHTML = `
            <section
              id="schedule"
              class="w-[1024px] h-[450px] grid grid-cols-5 gap-2 transition-all duration-400"
            >
              ${schedule.segments.slice(0, 5).map((segment: Segment, index: number) => {
                const category = categories.find((cat: Category) => cat.id === segment.category.id);
                return `
                  <article 
                    id="segment-${index}"
                    class="w-[1024/5px] h-full border-[#ff9931] border-solid border-4 relative"
                    style="background-image: url(${category?.box_art_url}); background-position: center;"
                  >
                    <footer
                      id="footer-${index}"
                      class="bg-[#ff9931] text-white absolute bottom-0 p-3 flex flex-col justify-start gap-4 hidden"
                    >
                      <h1 class="m-0 p-0 leading-[0.8] font-dinpro-bold">${segment.title}</h1>
                      <h2 class="m-0 p-0 leading-[0.8] font-dinpro-medium">${category?.name}</h2>
                      <div class="w-full flex flex-row items-end mr-[-2px]" style="margin-left: -4px;">
                        <p id="weekday-${index}" class="m-0 p-0 leading-[0.8] font-dinpro-bold text-[3.5rem]">
                          ${removeAccents(new Date(segment.start_time).toLocaleString('es-ES', {
                            weekday: 'long',
                          }).toUpperCase().replace(/,/g, ''))}
                        </p>
                        <div class="m-0 p-0 flex flex-col space-y-0">
                          <p class="m-0 p-0 leading-none font-dinpro-medium">
                            ${new Date(segment.start_time).toLocaleString('es-ES', {
                              hour: '2-digit',
                              minute: '2-digit',
                              hour12: false,
                            }).toUpperCase().replace(/,/g, '')}
                          </p>
                          <p class="m-0 p-0 leading-none font-dinpro-bold text-[28px]">
                            ${new Date(segment.start_time).toLocaleString('de', {
                              day: '2-digit',
                              month: '2-digit',
                              hour12: false,
                            }).toUpperCase().replace(/,/g, '')}
                          </p>
                        </div>
                      </div>
                    </footer>
                  </article>
                `;
              }).join('')}
            </section>
          `;

          setTimeout(() => {
            let currentIndex = 0;

            function updateSegment() {
              const segments = document.querySelectorAll('#schedule article');
              
              segments.forEach((segment, index) => {
                segment.classList.remove('selected'); 
              });

              if (segments[currentIndex]) {
                segments[currentIndex].classList.add('selected');
              }

              currentIndex = (currentIndex + 1) % segments.length; 
            }

            updateSegment();

            setInterval(updateSegment, 7500);
          }, 100);
        } else {
          if (scheduleContainer !== null) {
            scheduleContainer.innerHTML = '<p>No schedule available.</p>';
          }
        }

      } catch (error) {
          if (error instanceof Error) {
            if (scheduleContainer !== null) {
              scheduleContainer.innerHTML = `<p>Error loading data: ${error.message}</p>`;
            } 
          } else {
            if (scheduleContainer !== null) {
              scheduleContainer.innerHTML = `<p>Error loading data</p>`;
            }
          }
      }
    });
  </script>

  </body>
</html>

<style>
  :global(article) {
    filter: grayscale(100%) opacity(24%);
    transition: transform 0.4s ease-in-out;
  }

  :global(article.selected) {
    filter: none;
  }

  :global(article.selected footer) {
    display: block;
  }

  :global(#schedule:has(#segment-0.selected)) {
    grid-template-columns: 3fr 1fr 1fr 1fr 1fr;
  }

  :global(#schedule:has(#segment-1.selected)) {
    grid-template-columns: 1fr 3fr 1fr 1fr 1fr;
  }

  :global(#schedule:has(#segment-2.selected)) {
    grid-template-columns: 1fr 1fr 3fr 1fr 1fr;
  }

  :global(#schedule:has(#segment-3.selected)) {
    grid-template-columns: 1fr 1fr 1fr 3fr 1fr;
  }

  :global(#schedule:has(#segment-4.selected)) {
    grid-template-columns: 1fr 1fr 1fr 1fr 3fr;
  }
</style>
