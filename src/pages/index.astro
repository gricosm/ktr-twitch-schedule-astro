---
import { getTwitchSchedule, getTwitchCategories } from '../api/Twitch';
import type { TwitchScheduleResponse,TwitchCategoriesResponse, ScheduleData, Segment, Category } from '../types/twitchTypes';

const broadcasterId = import.meta.env.TWITCH_BROADCASTER_ID;

let schedule: ScheduleData | null = null;
let categories: Category[] | null = null;

try {
  const scheduleResponse: TwitchScheduleResponse = await getTwitchSchedule(broadcasterId);

  if (scheduleResponse.data) {
    schedule = scheduleResponse.data;
    const categoriesResponse: TwitchCategoriesResponse = await getTwitchCategories(schedule.segments.map(segment => segment.category.id), 432, 650);
    if (categoriesResponse) {
      categories = categoriesResponse.data;
    }
  }
 
} catch (error) {
  console.error('Error fetching Twitch schedule:', error);
}
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <title>Schedule for: {schedule?.broadcaster_name || 'Unknown Broadcaster'}</title>
</head>
<body>
  <h1>Schedule for: {schedule?.broadcaster_name || 'Unknown Broadcaster'}</h1>
  {schedule ? (
    <div>
      <h2>General Information:</h2>
      <p>ID: {schedule.broadcaster_id}</p>
      <p>Login: {schedule.broadcaster_login}</p>
      <p>Type: {schedule.vacation ? 'On Vacation' : 'Active'}</p>
      {schedule.vacation && (
        <>
          <h3>Vacation Info:</h3>
          <p>Start: {new Date(schedule.vacation.start_time).toLocaleString()}</p>
          <p>End: {new Date(schedule.vacation.end_time).toLocaleString()}</p>
        </>
      )}
      <h2>Schedule:</h2>

      <section class="calendar-container">
        <div class="block-cards-twitch" >
          {schedule.segments.map((segment: Segment) => {
            const category = categories?.find(cat => cat.id === segment.category.id);

            return (
              <article style={`background-image: url(${category?.box_art_url}); background-position: center;`}>
                <h3>{segment.title}</h3>
                <h3>{category?.name}</h3>
                <p>Start Time: {new Date(segment.start_time).toLocaleString()}</p>
                <p>End Time: {new Date(segment.end_time).toLocaleString()}</p>
              </article>
            );
          })}
        </div>
      </section>
    </div>
  ) : (
    <p>No schedule available.</p>
  )}
</body>
</html>

<style>

  .calendar-container {
    width: 100dvw;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
</style>